(def (assert-eq x . args)
	(if (apply = x args)
		true
		(do
			(print x '!= args)
			(assert false)
		)
	)
)

(import (slang file))

(def baseStr "test ")
(def s (make-ostream baseStr))


(assert-eq "test " (stream->str s))
(write! s "hello")
(assert-eq "test hello" (stream->str s))
(assert !(file? s))
(def inS (make-istream (stream->str s)))
(assert-eq "test" (read! inS 4))
(assert-eq " hello" (read! inS))
(assert (eof? (read! inS)))
(assert (eof? (read! inS -2)))
(assert (eof? (read! inS 100)))
(assert !(file? inS))
(def emptyS (make-istream ""))
(assert (eof? (read! emptyS 1)))
(assert (eof? (read-byte! emptyS)))
(write-byte! s 70)
(seek-off! s -10)
(write! s "wow!")
(assert-eq "twow!helloF" (stream->str s))
(assert-eq 5 (tell s))

(def pathname "streamtest_testfile.txt")
(def fs (make-ofstream! pathname))
(assert (file? fs))
(assert (file-open? fs))
(write! fs "abcde")
(file-close! fs)
(def fsi (make-ifstream pathname))
(assert-eq "abcde" (read! fsi))
(file-close! fsi)
(assert (path-exists? pathname))
(assert !(empty? (try (path-remove! pathname))))
(assert !(path-exists? pathname))

; input-from! testing
(def s "Hello, World!\nSecond line")
(def s2 "Hello, World!\nSecond line\n")

(def inS (make-istream s))
(assert-eq "Hello, World!" (input-from! inS))
(assert-eq "Second line" (input-from! inS))
(assert (eof? (input-from! inS)))
(assert (eof? (input-from! inS)))

(def inS (make-istream s2))
(assert-eq "Hello, World!" (input-from! inS))
(assert-eq "Second line" (input-from! inS))
(assert (eof? (input-from! inS)))
(assert (eof? (input-from! inS)))

(def numStr "My number: ")
(def outS (make-ostream numStr))
(output-to! outS 37 "test")
(output-to! outS 'testSym " " 'def)
(assert-eq "My number: 37testtestSym def" numStr)

(output "stream passed\n")
