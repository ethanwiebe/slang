(def errored? (& (expr) 
	(empty? (try (eval expr)))
))


(def (secondtest x y) (+ x y))
(def testf (& ()
	(empty? (try (secondtest 3 4)))
))

(def (assert-eq x . args)
	(if (apply = x args)
		true
		(do
			(print x '!= args)
			(assert false)
		)
	)
)

(assert (null? ()))
(assert !(null? 2))
(assert (pair? '(1 2)))
(assert (pair? (pair () ())))
(assert (num? 2))
(assert (num? 2.1))
(assert (num? (+ 2.1 1.3)))
(assert !(int? 2.1))
(assert !(int? 2.0))
(assert !(real? 2))
(assert (real? .2))
(assert (str? "hello"))
(assert (str? ""))
(assert !(null? ""))
; empty string has false value
(assert !"")
; zero has false value
(assert !0)
(assert !!2)
(assert !!-1)
; null has false value
(assert !())
(assert (null? ((& () ()))))
(assert (proc? (& () ())))
(assert (vec? (vec 123 4 'hello)))
(assert (vec? (vec-alloc 100)))
(def t 3)
(assert (bound? 't))
(assert (bound? 'bound?))
(assert !(bound? 'abc))
(assert (maybe? (try)))
(assert (maybe? (try (+ 3 4))))
(assert (maybe? (try (+ 3 'abc))))
(assert !(try))
(assert !!(try (+ 3 4)))
(assert !(try (+ 3 'def)))
(assert (empty? (try)))
(assert !(empty? (try 3)))
(assert (empty? (try (+ 3 'hello))))
(assert (empty? ""))
(assert (empty? ()))
(assert (empty? #()))
(assert (empty? (dict)))

(assert !(testf))
(assert !(errored? '(testf)))
(assert !(errored? '(+ 3 4)))
(assert (errored? '(+ 3 'hello)))
(set! t ())
(assert !(eof? ()))
(assert (null? t))
(assert (> 3 2 1 0 -1))
(assert !(> 3 2 1 0 0))
(assert !(> 3 3 3 3 3))
(assert (>= 3 3 3 3 3))
(assert (> 3 2.99999))

(assert-eq 
	-1 
	(/ -1 2)
	(/ 1 -2)
	(floor (/ 1.0 -2.0))
)

(assert-eq 
	1 
	(^ 0 0)
	(^ 0 0.0)
	(^ 0.0 0)
	(^ 0.0 0.0)
)

(assert-eq 0.25 (% 1.25 1.0))
(assert-eq 0.75 (% -1.25 1.0))
(assert-eq -0.75 (% 1.25 -1.0))
(assert-eq -0.25 (% -1.25 -1.0))

(assert-eq 1 (% 103 17))
(assert-eq 16 (% -103 17))
(assert-eq -16 (% 103 -17))
(assert-eq -1 (% -103 -17))

(assert (is (and true () false) ()))
(assert (is (and 1 2 3 0 4) 0))
(assert (is (and 1 2 3 4) 4))
(assert (is (and) true))
(assert (is (or) false))
(assert (is (or 1 2 3) 1))
(assert (is (or 0 false () 3 false) 3))
(assert (is (or 0 false () 0) 0))
(assert-eq 1 (cond (true 1) (false 2)))
(assert-eq 2 (cond (false 1) (true 2)))
(assert-eq 3 (cond (false 1) (false 2) (else 3)))
(assert-eq '(1 2 3) `(1 ,(+ 1 1) ,(++ 2)))
(assert-eq '(1 2 3) `(1 @(list 2 3)))

(assert-eq 'yes 
	(case (+ 1 2)
		((5 3 6) 'yes)
		((10 2 4) 'no)
		(() 'hidden)
	)
)
(assert-eq 'hello (case (+ 1 2) ((1 2 4) 'abc) ((5 7 6) 'yes) (else 'hello)))

(def a 3)
(def (f x)
	(def y (++ x))
	(def z (* 2 y))
	(def (g x) (* x x))
	(def w (+ y z a))
	(def t (g w))
	(++ t)
)

(def (f2 x)
	(def y (++ x))
	(def z (* 2 y))
	(def (g x) (* x z))
	(def w (+ y z a))
	(def t (g w))
	(++ t)
)

(assert-eq (f 3) 226)
(assert-eq (f2 3) 121)

(output "predicate passed\n")
